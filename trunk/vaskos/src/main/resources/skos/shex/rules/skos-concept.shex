prefix :     <http://example.org/>
prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> 
prefix owl:     <http://www.w3.org/2002/07/owl#> 
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix xsd:  <http://www.w3.org/2001/XMLSchema#>
prefix shex: <http://www.w3.org/2013/ShEx/ns#>

start = <SkosConceptShape>  # A scheme concept validation starts with <SkosConceptShape>

<SkosConceptShape> {              						# An skos:Concept has:
 rdfs:label xsd:string*,
 rdfs:description xsd:string*,
 rdf:type (skos:Concept owl:Class owl:ObjectProperty)+, # type which is skos:Concept or/and OWL:Class
 skos:inScheme 		@<SkosConceptSchemeShape>*,					# and belongs to 0..n concept schemes,   
 skos:topConceptOf 	@<SkosConceptSchemeShape>*,				# and can be top concept of 0..n schemes
 skos:prefLabel xsd:string*,
 skos:altLabel xsd:string*,
 skos:hiddenLabel xsd:string*,
 skos:notation .*,
 #skos:note (rdf:Resource  xsd:string | <DataTypePropertyShape>)*,
 skos:note .*,
 skos:changeNote xsd:string*,
 skos:definition xsd:string*,
 skos:editorialNote xsd:string*,
 skos:example xsd:string*,
 skos:historyNote xsd:string*,
 skos:scopeNote xsd:string*,
 skos:semanticRelation    @<SkosConceptShape>*,
 skos:broader 	    @<SkosConceptShape>*,				# and can have 0..1 broader elements
 skos:narrower 	    @<SkosConceptShape>*,			# and can have 0..n narrower elements
 skos:broaderTransitive 	    @<SkosConceptShape>*,				# and can have 0..1 broader elements
 skos:narrowerTransitive 	    @<SkosConceptShape>*,		# and can have 0..n narrower elements
 skos:related @<SkosConceptShape>*,
 skos:mappingRelation (rdf:Resource <SkosConceptShape>)*,
 skos:semanticRelation (rdf:Resource <SkosConceptShape>)*,
 skos:exactMatch (rdf:Resource <SkosConceptShape>)*, 
 skos:closeMatch (rdf:Resource <SkosConceptShape>)*, 
 skos:broadMatch (rdf:Resource <SkosConceptShape>)*, 
 skos:narrowMatch (rdf:Resource <SkosConceptShape>)*,
 skos:relatedMatch (rdf:Resource <SkosConceptShape>)*
}


<SkosConceptSchemeShape> { 				  #An skos:Concept Scheme has:
 rdfs:label xsd:string*,
 rdfs:description xsd:string*,
 rdf:type (skos:ConceptScheme owl:Class owl:ObjectProperty owl:Ontology)+, # type which is skos:ConceptScheme or/and owl:Class or/and owl:ObjectProperty
 skos:hasTopConcept @<SkosConceptShape>*	  # and has 0..n top skos:Concept
}

<SkosCollectionShape> { 	
 rdfs:label xsd:string*,
 rdfs:description xsd:string*,
 rdf:type (skos:Collection owl:Class),
 skos:member (<SkosConceptShape> <SkosCollectionShape>)+

}

<SkosOrderedCollectionShape> { 	
 #& <SkosCollectionShape>,
  rdfs:label xsd:string*,
  rdfs:description xsd:string*,
  rdf:type (skos:OrderedCollection skos:Collection owl:Class),
  skos:memberList .*
}


